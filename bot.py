import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)
from database import Database
import config
import threading
import time
from parsers import fetch_all_news


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

SET_DEFAULT_SOURCE, SET_ITEMS_PER_PAGE = range(2)

COMMANDS = {
    'start': '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
    'news': '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
    'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
    'subscriptions': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏',
    'help': '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = Database()
    
    try:
        db.execute(
            "INSERT INTO users (telegram_id, username, full_name) VALUES (%s, %s, %s) "
            "ON CONFLICT (telegram_id) DO NOTHING",
            (user.id, user.username, user.full_name),
            commit=True
        )
        
        db.execute(
            "INSERT INTO user_settings (user_id) "
            "SELECT id FROM users WHERE telegram_id = %s "
            "ON CONFLICT (user_id) DO NOTHING",
            (user.id,),
            commit=True
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.full_name} (ID: {user.id})")
        
        message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n\n"
            " –í –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∏—Ç: \n"
            "-–ü—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
            "-–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
            "-–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        )
        message += "\n".join([f"/{cmd} - {desc}" for cmd, desc in COMMANDS.items()])
        
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        db.close()

async def handle_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = Database()
    
    try:
        settings = db.fetch_one(
            "SELECT items_per_page, default_source_id FROM user_settings "
            "WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s)",
            (user.id,)
        )
        
        if not settings:
            await update.message.reply_text("–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            return
        
        items_per_page = settings[0] or 5
        default_source_id = settings[1]
        
        if default_source_id:
            news = db.fetch_all(
                "SELECT n.title, n.url, s.base_url FROM news n "
                "JOIN sources s ON n.source_id = s.id "
                "WHERE s.id = %s ORDER BY n.published_at DESC LIMIT %s",
                (default_source_id, items_per_page)
            )
        else:
            news = db.fetch_all(
                "SELECT n.title, n.url, s.base_url FROM news n "
                "JOIN sources s ON n.source_id = s.id "
                "ORDER BY n.published_at DESC LIMIT %s",
                (items_per_page,)
            )
        
        if not news:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return
        
        response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for item in news:
            domain = item[2].replace('www.', '').split('/')[0]
            response += f"{item[0]}\n<a href='{item[1]}'>–ß–∏—Ç–∞—Ç—å</a>\n\n"
        
        await update.message.reply_text(
            text=response,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data='set_default_source')],
        [InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data='set_items_per_page')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:', reply_markup=reply_markup)

async def settings_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == 'set_default_source':
        db = Database()
        try:
            sources = db.fetch_all("SELECT id, name FROM sources")
            
            keyboard = []
            for source in sources:
                keyboard.append([InlineKeyboardButton(source[1], callback_data=f'set_source_{source[0]}')])
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_settings')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        finally:
            db.close()
    
    elif data.startswith('set_source_'):
        source_id = data.split('_')[-1]
        user_id = query.from_user.id
        db = Database()
        
        try:
            db.execute(
                "UPDATE user_settings SET default_source_id = %s "
                "WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s)",
                (source_id, user_id),
                commit=True
            )
            
            source_name = db.fetch_one("SELECT name FROM sources WHERE id = %s", (source_id,))[0]
            await query.edit_message_text(text=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {source_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
        finally:
            db.close()
    
    elif data == 'set_items_per_page':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (1-20):")
        return SET_ITEMS_PER_PAGE
    
    elif data == 'back_to_settings':
        await settings_command(update, context)
        return ConversationHandler.END
    
    elif data == 'back_to_main':
        await query.delete_message()
        await start(update, context)
        return ConversationHandler.END
    
    return ConversationHandler.END

async def set_items_per_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    db = Database()
    
    try:
        count = int(update.message.text)
        if 1 <= count <= 20:
            db.execute(
                "UPDATE user_settings SET items_per_page = %s "
                "WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s)",
                (count, user_id),
                commit=True
            )
            await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {count}")
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
    finally:
        db.close()
    
    return ConversationHandler.END

async def subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = Database()
    
    try:
        subscriptions = db.fetch_all(
            "SELECT s.id, s.name FROM subscriptions sub "
            "JOIN sources s ON sub.source_id = s.id "
            "WHERE sub.user_id = (SELECT id FROM users WHERE telegram_id = %s)",
            (user.id,)
        )
        
        all_sources = db.fetch_all("SELECT id, name FROM sources")
        
        keyboard = []
        for source in all_sources:
            source_id, source_name = source
            is_subscribed = any(sub[0] == source_id for sub in subscriptions)
            button_text = f"{'‚úÖ ' if is_subscribed else '‚ùå '}{source_name}"
            callback_data = f"toggle_sub_{source_id}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data='done_subs')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üì¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")
    finally:
        db.close()

async def subscriptions_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == 'done_subs':
        await query.edit_message_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    
    if data.startswith('toggle_sub_'):
        source_id = data.split('_')[-1]
        user_id = query.from_user.id
        db = Database()
        
        try:
            is_subscribed = db.fetch_one(
                "SELECT id FROM subscriptions WHERE "
                "user_id = (SELECT id FROM users WHERE telegram_id = %s) AND source_id = %s",
                (user_id, source_id)
            )
            
            if is_subscribed:
                db.execute(
                    "DELETE FROM subscriptions WHERE "
                    "user_id = (SELECT id FROM users WHERE telegram_id = %s) AND source_id = %s",
                    (user_id, source_id),
                    commit=True
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}")
            else:
                db.execute(
                    "INSERT INTO subscriptions (user_id, source_id) VALUES "
                    "((SELECT id FROM users WHERE telegram_id = %s), %s)",
                    (user_id, source_id),
                    commit=True
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ {source_id}")
            
            await subscriptions_command(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        finally:
            db.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
    help_text += "\n".join([f"/{cmd} - {desc}" for cmd, desc in COMMANDS.items()])
    await update.message.reply_text(help_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    if update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("news", handle_news))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("subscriptions", subscriptions_command))
    application.add_handler(CommandHandler("help", help_command))
    
    application.add_handler(CallbackQueryHandler(settings_button, pattern='^(set_default_source|set_source_|set_items_per_page|back_to)'))
    application.add_handler(CallbackQueryHandler(subscriptions_button, pattern='^(toggle_sub_|done_subs)'))
    
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(settings_button, pattern='^set_items_per_page$')],
        states={
            SET_ITEMS_PER_PAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_items_per_page)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )
    application.add_handler(conv_handler)
    
    application.add_error_handler(error_handler)

def news_scheduler():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    while True:
        try:
            fetch_all_news()
            logger.info("–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        time.sleep(1800)  

def main():
    scheduler_thread = threading.Thread(target=news_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("–°–ª—É–∂–±–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    application = Application.builder().token(config.BOT_TOKEN).build()
    setup_handlers(application)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()